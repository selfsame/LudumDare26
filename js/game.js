// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  $(window).ready(function() {
    var Entity, Player, Sentient;
    window.game = {
      box2Dworld: 0,
      current_level: 0,
      current_level_style: 0,
      game_area_position: [0, 0],
      debugdraw: 1,
      player: 0,
      init: function() {
        $(window).keydown(function(e) {
          console.log(e.keyCode);
          if (window.game.player) {
            return window.game.player.keydown(e);
          }
        });
        return $(window).keyup(function(e) {
          console.log(e.keyup);
          if (window.game.player) {
            return window.game.player.keyup(e);
          }
        });
      },
      load_level: function(name) {
        var g_o;
        g_o = $('#game_level').offset();
        this.game_area_position = [g_o.left, g_o.top];
        this.static_objects = [];
        this.dynamic_objects = [];
        return $.get('./levels/' + name, function(data) {
          var div, style, temp, _i, _len, _ref;
          temp = $('<div></div>');
          temp.html(data);
          if (this.current_level_style) {
            this.current_level_style.detach();
            this.current_level_style = 0;
          }
          style = temp.children('style');
          $('head').append(style);
          this.current_level_style = style;
          $('#game_level').html('');
          _ref = temp.children('div');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            div = _ref[_i];
            console.log('-- ', div);
            $('#game_level').append($(div));
          }
          return window.game.setup_level_physics();
        });
      },
      insert_player: function() {
        var pel;
        pel = $('<div id="player"></div>');
        $('#centered').append(pel);
        pel.css({
          left: 10,
          top: 10
        });
        this.player = new Player(pel[0], 1);
        return this.dynamic_objects.push(this.player);
      },
      setup_level_physics: function() {
        var b2AABB, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2MouseJointDef, b2PolygonShape, b2Vec2, b2World, debugDraw, div, entity, world, _i, _len, _ref;
        b2Vec2 = Box2D.Common.Math.b2Vec2;
        b2AABB = Box2D.Collision.b2AABB;
        b2BodyDef = Box2D.Dynamics.b2BodyDef;
        b2Body = Box2D.Dynamics.b2Body;
        b2FixtureDef = Box2D.Dynamics.b2FixtureDef;
        b2Fixture = Box2D.Dynamics.b2Fixture;
        b2World = Box2D.Dynamics.b2World;
        b2MassData = Box2D.Collision.Shapes.b2MassData;
        b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;
        b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;
        b2DebugDraw = Box2D.Dynamics.b2DebugDraw;
        b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef;
        this.box2Dworld = new b2World(new b2Vec2(0, 20), true);
        world = this.box2Dworld;
        _ref = $('#game_level').children();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          div = _ref[_i];
          entity = new Entity(div);
          if ($(div).hasClass('dynamic')) {
            this.dynamic_objects.push(entity);
          } else {
            this.static_objects.push(entity);
          }
        }
        this.insert_player();
        if (this.debugdraw) {
          debugDraw = new b2DebugDraw();
          debugDraw.SetSprite(document.getElementById("game_area").getContext("2d"));
          debugDraw.SetDrawScale(1.0);
          debugDraw.SetFillAlpha(0.5);
          debugDraw.SetLineThickness(1.0);
          debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
          this.box2Dworld.SetDebugDraw(debugDraw);
          return world.DrawDebugData();
        }
      },
      create_body: function(x, y, w, h, angle, dynamic) {
        var b2AABB, b2Body, b2BodyDef, b2Fixture, b2FixtureDef, b2PolygonShape, bodyDef, fixDef;
        if (angle == null) {
          angle = 0;
        }
        if (dynamic == null) {
          dynamic = 0;
        }
        console.log('creating physics body');
        b2FixtureDef = Box2D.Dynamics.b2FixtureDef;
        b2Fixture = Box2D.Dynamics.b2Fixture;
        b2AABB = Box2D.Collision.b2AABB;
        b2BodyDef = Box2D.Dynamics.b2BodyDef;
        b2Body = Box2D.Dynamics.b2Body;
        b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;
        fixDef = new b2FixtureDef;
        fixDef.density = 1.0;
        fixDef.friction = 0.8;
        fixDef.restitution = 0.2;
        bodyDef = new b2BodyDef;
        if (!dynamic) {
          bodyDef.type = b2Body.b2_staticBody;
        } else {
          bodyDef.type = b2Body.b2_dynamicBody;
        }
        fixDef.shape = new b2PolygonShape;
        fixDef.shape.SetAsBox(w, h);
        bodyDef.angle = angle;
        bodyDef.position.Set(x, y);
        return this.box2Dworld.CreateBody(bodyDef).CreateFixture(fixDef);
      },
      get_element_rotation: function(obj) {
        var a, b, matrix, radians, values;
        obj = $(obj);
        matrix = obj.css("-webkit-transform") || obj.css("-moz-transform") || obj.css("-ms-transform") || obj.css("-o-transform") || obj.css("transform");
        if (matrix !== "none") {
          values = matrix.split("(")[1].split(")")[0].split(",");
          a = values[0];
          b = values[1];
          return radians = Math.atan2(b, a);
        } else {
          return radians = 0;
        }
      },
      update_world: function() {
        var entity, _i, _len, _ref, _results;
        requestAnimationFrame(window.game.update_world);
        window.game.box2Dworld.Step(1 / 10, 10, 10);
        if (window.game.debugdraw) {
          window.game.box2Dworld.DrawDebugData();
        }
        window.game.box2Dworld.ClearForces();
        _ref = window.game.dynamic_objects;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entity = _ref[_i];
          _results.push(entity.update());
        }
        return _results;
      }
    };
    Entity = (function() {

      Entity.name = 'Entity';

      function Entity(element, dynamic) {
        if (dynamic == null) {
          dynamic = 0;
        }
        this.init();
        this.element = $(element);
        this.angle = window.game.get_element_rotation(element);
        if (!this.angle) {
          this.angle = 0;
        }
        if (dynamic === 1 || this.element.hasClass('dynamic')) {
          this.dynamic = 1;
        } else {
          this.dynamic = 0;
        }
        this.x = element.offsetLeft;
        this.y = element.offsetTop;
        this.w = this.element.outerWidth();
        this.h = this.element.outerHeight();
        this.construct_physical();
      }

      Entity.prototype.init = function() {
        this._cached_x = 0;
        this._cached_y = 0;
        this._cached_degrees = 0;
        this._show_rotation = 1;
        this._keep_upright = 0;
        return this.max_force = 0;
      };

      Entity.prototype.construct_physical = function() {
        this.Box_ref = window.game.create_body(this.x + (this.w / 2), this.y + (this.h / 2), this.w / 2, this.h / 2, this.angle, this.dynamic);
        this.Body = this.Box_ref.m_body;
        return this.max_force = 300.0 * this.Body.GetMass();
      };

      Entity.prototype.update = function() {
        var degrees, gp, needs_pos_redraw, x, y;
        x = this.Body.m_xf.position.x - this.w / 2;
        y = this.Body.m_xf.position.y - this.h / 2;
        gp = window.game.game_area_position;
        needs_pos_redraw = 0;
        if (Math.abs(this._cached_x - x) >= 1) {
          this._cached_x = x;
          needs_pos_redraw = 1;
        }
        if (Math.abs(this._cached_y - y) >= 1) {
          this._cached_y = y;
          needs_pos_redraw = 1;
        }
        if (needs_pos_redraw) {
          if (this._show_rotation) {
            this.element.css('-webkit-transform', '');
          }
          this.element.offset({
            left: x + gp[0],
            top: y + gp[1]
          });
        }
        if (this._show_rotation) {
          degrees = this.Body.GetAngle() * (180 / Math.PI);
          if (Math.abs(this._cached_degrees - degrees) >= 1 || needs_pos_redraw) {
            this._cached_degrees = degrees;
            this.element.css('-webkit-transform', 'rotate(' + degrees + 'deg)');
          }
        }
        if (this._keep_upright) {
          this.Body.m_sweep.a = 0;
        }
        return this.update_other();
      };

      Entity.prototype.update_other = function() {
        var n;
        return n = false;
      };

      return Entity;

    })();
    Sentient = (function(_super) {

      __extends(Sentient, _super);

      Sentient.name = 'Sentient';

      function Sentient() {
        return Sentient.__super__.constructor.apply(this, arguments);
      }

      Sentient.prototype.init = function() {
        this._cached_x = 0;
        this._cached_y = 0;
        this._cached_degrees = 0;
        this._show_rotation = 1;
        this._keep_upright = 0;
        return this.move_intent = [0, 0];
      };

      Sentient.prototype.apply_force = function() {
        var p, v, x, y;
        x = this.move_intent[0] * this.max_force;
        y = this.move_intent[1] * this.max_force;
        v = new Box2D.Common.Math.b2Vec2(x, y);
        p = this.Body.GetPosition();
        return this.Body.ApplyForce(v, p);
      };

      Sentient.prototype.apply_impulse = function(x, y) {
        var p, v;
        x = x * this.max_force;
        y = y * this.max_force;
        v = new Box2D.Common.Math.b2Vec2(x, y);
        p = this.Body.GetPosition();
        return this.Body.ApplyImpulse(v, p);
      };

      return Sentient;

    })(Entity);
    Player = (function(_super) {

      __extends(Player, _super);

      Player.name = 'Player';

      function Player() {
        return Player.__super__.constructor.apply(this, arguments);
      }

      Player.prototype.init = function() {
        this._cached_x = 0;
        this._cached_y = 0;
        this._cached_degrees = 0;
        this._show_rotation = 1;
        this._keep_upright = 1;
        this.keys = {};
        return this.move_intent = [0, 0];
      };

      Player.prototype.update_other = function() {
        if (this.keys['up'] === 1) {
          this.apply_impulse(0, -1);
        }
        this.move_intent[0] = 0;
        if (this.keys['right'] === 1) {
          this.move_intent[0] = .1;
        }
        if (this.keys['left'] === 1) {
          this.move_intent[0] = -.1;
        }
        return this.apply_force();
      };

      Player.prototype.keydown = function(e) {
        var _ref, _ref1, _ref2;
        if ((_ref = e.keyCode) === 87 || _ref === 38) {
          return this.keys['up'] = 1;
        } else if ((_ref1 = e.keyCode) === 68 || _ref1 === 39) {
          return this.keys['right'] = 1;
        } else if ((_ref2 = e.keyCode) === 65 || _ref2 === 37) {
          return this.keys['left'] = 1;
        }
      };

      Player.prototype.keyup = function(e) {
        var _ref, _ref1, _ref2;
        if ((_ref = e.keyCode) === 87 || _ref === 38) {
          return this.keys['up'] = 0;
        } else if ((_ref1 = e.keyCode) === 68 || _ref1 === 39) {
          return this.keys['right'] = 0;
        } else if ((_ref2 = e.keyCode) === 65 || _ref2 === 37) {
          return this.keys['left'] = 0;
        }
      };

      return Player;

    })(Sentient);
    window.game.init();
    window.game.load_level('level03.html');
    return window.game.update_world();
  });

}).call(this);
